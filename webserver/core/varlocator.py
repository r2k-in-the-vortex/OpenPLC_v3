import os
import json

glueformat = """//-----------------------------------------------------------------------------
// Copyright 2015 Thiago Alves
// This file is part of the OpenPLC Software Stack.
//
// OpenPLC is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenPLC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OpenPLC.  If not, see <http://www.gnu.org/licenses/>.
//------
//
// This file is responsible for gluing the variables from the IEC program to
// the OpenPLC memory pointers. It is automatically generated by the
// glue_generator program. PLEASE DON'T EDIT THIS FILE!
// Thiago Alves, May 2016
//-----------------------------------------------------------------------------

#include "iec_std_lib.h"

TIME __CURRENT_TIME;
unsigned long long common_ticktime__;

//Internal buffers for I/O and memory. These buffers are defined in the
//auto-generated glueVars.cpp file
#define BUFFER_SIZE		1024

//Booleans
IEC_BOOL *bool_input[BUFFER_SIZE][8];
IEC_BOOL *bool_output[BUFFER_SIZE][8];

//Bytes
IEC_BYTE *byte_input[BUFFER_SIZE];
IEC_BYTE *byte_output[BUFFER_SIZE];

//Analog I/O
IEC_UINT *int_input[BUFFER_SIZE];
IEC_UINT *int_output[BUFFER_SIZE];

//Memory
IEC_UINT *int_memory[BUFFER_SIZE];
IEC_DINT *dint_memory[BUFFER_SIZE];
IEC_LINT *lint_memory[BUFFER_SIZE];

//Special Functions
IEC_LINT *special_functions[BUFFER_SIZE];

#include "LOCATED_VARIABLES.h"

void glueVars()
{{
{glue}
}}

void updateTime()
{{
	__CURRENT_TIME.tv_sec  += common_ticktime__ / 1000000000ULL;
	__CURRENT_TIME.tv_nsec += common_ticktime__ % 1000000000ULL;

	if (__CURRENT_TIME.tv_nsec >= 1000000000ULL)
	{{
		__CURRENT_TIME.tv_nsec -= 1000000000ULL;
		__CURRENT_TIME.tv_sec += 1;
	}}
}}"""

def generate_located_header(path_to_json, path_to_header, path_to_glue):
    with open(path_to_json) as f:
        data = json.load(f)
    direction = {
        "Input":"I",
        "Output":"Q"
    }
    types = {
        "Bit" : "IEC_BOOL"
    }
    sizes = {
        "Bit" : "X"
    }
    arraytypes = {
        "IEC_BOOL" : "bool",
        "IEC_BYTE" : "byte",
        "IEC_UINT" : "int",
        "IEC_DINT" : "dint",
        "IEC_LINT" : "lint"
    }
    with open(path_to_header, "w") as f:
        for vv in data['HardwareConfiguration']:
            var = vv[0]
            vartype = types[var["type"]]
            varname = var["name"]
            vardir = direction[var["direction"]]
            varsize = sizes[var["type"]]
            varadr0 = var["address"][0]
            varadr1 = var["address"][1]
            f.write(f"extern \"C\" {vartype} {varname};\n")
        for vv in data['HardwareConfiguration']:
            var = vv[0]
            vartype = types[var["type"]]
            varname = var["name"]
            vardir = direction[var["direction"]]
            varsize = sizes[var["type"]]
            varadr0 = var["address"][0]
            varadr1 = var["address"][1]
            f.write(f"{vartype} *__{vardir}{varsize}{varadr0}_{varadr1} = &{varname};\n")
            
    gluetext = ""
    for vv in data['HardwareConfiguration']:
        var = vv[0]
        vartype = types[var["type"]]
        varname = var["name"]
        vardir = direction[var["direction"]]
        varsize = sizes[var["type"]]
        varadr0 = var["address"][0]
        varadr1 = var["address"][1]
        arraydir = var["direction"].lower()
        if vartype == "IEC_BOOL":
            gluetext += f"\t{arraytypes[vartype]}_{arraydir}[{varadr0}][{varadr1}] = __{vardir}{varsize}{varadr0}_{varadr1};\n"
        else:
            gluetext += f"\t{arraytypes[vartype]}_{arraydir}[{varadr0}] = __{vardir}{varsize}{varadr0}_{varadr1};\n"
    with open(path_to_glue, "w") as f:
        f.write(glueformat.format(glue = gluetext))
        


if __name__ == "__main__":
    generate_located_header("runtime/json", "runtime/LOCATED_VARIABLES.h", "runtime/glueVars.cpp")